#!/usr/bin/env perl

use strict;
use warnings;
use feature qw( say );
use local::lib 'local';

use MaxMind::DB::Writer::Tree;
use Net::Works::Network;

my $outfile = '/data/example.mmdb';

# Your top level data structure will always be a map (hash).  The MMDB format
# is strongly typed.  Describe your data types here.
# See https://metacpan.org/pod/MaxMind::DB::Writer::Tree#DATA-TYPES

my %types = (
    service_area => 'utf8_string',
);

my $tree = MaxMind::DB::Writer::Tree->new(

    # "database_type" is some arbitrary string describing the database.  At
    # MaxMind we use strings like 'GeoIP2-City', 'GeoIP2-Country', etc.
    database_type => 'GeoIP4-ServiceArea',

    # "description" is a hashref where the keys are language names and the
    # values are descriptions of the database in that language.
    description =>
        { en => 'My database of IP data', fr => q{Mon Data d'IP}, },

    # "ip_version" can be either 4 or 6
    ip_version => 4,

    # add a callback to validate data going in to the database
    map_key_type_callback => sub { $types{ $_[0] } },

    # "record_size" is the record size in bits.  Either 24, 28 or 32.
    record_size => 24,
);

# my %address_for_employee = (
#     '123.125.71.29/32' => {
#         environments => [ 'development', 'staging', 'production' ],
#         expires      => 86400,
#         name         => 'Jane',
#     },
#     '8.8.8.8/28' => {
#         environments => [ 'development', 'staging' ],
#         expires      => 3600,
#         name         => 'Klaus',
#     },
# );
use lib qw(..);

use JSON qw( );

my $infile = '/data/example.json';

my $json_text = do {
   open(my $json_fh, "<:encoding(UTF-8)", $infile)
      or die("Can't open \$infile\": $!\n");
   local $/;
   <$json_fh>
};

my $json = JSON->new;
my $data = $json->decode($json_text);

for my $key (keys %$data) {

    # Create one network and insert it into our database
    my $network = Net::Works::Network->new_from_string( string => $key);
    say "${key} => $data->{$key}{'service_area'}";

    $tree->insert_network( $key, $data->{$key});
}

# Write the database to disk.
open my $fh, '>:raw', $outfile;
$tree->write_tree( $fh );
close $fh;

say "$outfile has now been created";
